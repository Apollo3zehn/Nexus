@implements IDisposable
@inject AppState AppState

<div class="flex w-full h-full">
    <div class="flex flex-col p-2 select-none w-36 sm:w-72 gap-2">

        <MudTextField
            @bind-Value="AppState.SearchString"
            Label="Search"
            Adornment="Adornment.End"
            AdornmentColor="Color.Primary"
            AdornmentIcon="@_searchIcon"
            OnAdornmentClick="() => AppState.SearchString = default"
            Immediate="true"
            Margin="Margin.Dense" />

        <div class="overflow-y-auto">
            @if (AppState.CatalogItemsMap is not null)
            {
                @foreach (var entry in AppState.CatalogItemsMap) //String = GruppenName, Val = Gruppe selbst
                {
                    @if (entry.Value == AppState.CatalogItemsGroup) //AppState.CatalogItemsGroup aktuelle gewählte gruppe
                    {
                        <div class="flex justify-between items-end py-0.5 cursor-pointer">
                            <span class="font-bold text-orange-500">@entry.Key</span>
                            <span class="text-sm text-gray-500">@entry.Value.Count</span>
                        </div>
                    }
                    else
                    {
                        <div class="group flex justify-between items-end py-0.5 cursor-pointer"
                            @onclick="() => SelectCatalogItemsGroupAsync(entry.Value)">
                            <span class="group-hover:text-cyan-500 font-bold text-cyan-700">@entry.Key</span>
                            <span class="text-sm text-gray-500">@entry.Value.Count</span>
                        </div>
                    }
                }
            }
        </div>
    </div>

    <div class="flex-1 p-2 h-full">
        <div class="overflow-y-auto select-none h-full">
            <MudDataGrid
                T="CatalogItemViewModel"
                Items="@AppState.CatalogItemsGroup"
                ReadOnly=@(!AppState.EditModeCatalogMap.ContainsKey(AppState.SelectedCatalog!.Id))
                EditMode="DataGridEditMode.Cell"
                EditTrigger="DataGridEditTrigger.OnRowClick"
                CommittedItemChanges="@CommittedItemChanges"
                Filterable="true"
                QuickFilter="@QuickFilter"
                RowClick="@RowClicked"
                RowStyleFunc="@RowStyleFunc"
                RowContextMenuClick="@OpenGridContextMenu">
                <Columns>
                    <PropertyColumn Property="x => x.Resource.Id" Title="ID" IsEditable="false"/>
                    <PropertyColumn Property="x => Utilities.ToUnitString(x.Representation.SamplePeriod, false)" Title="Sample Period"/>
                    <PropertyColumn Property="x => x.Description" Title="Description" />
                    <PropertyColumn Property="x => x.Unit" Title="Unit"/>
                    <PropertyColumn Property="x => x.Warning" Title="Warning"/>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="CatalogItemViewModel" />
                </PagerContent>
            </MudDataGrid>
        </div>
    </div>
</div>

<UIContextMenu @bind-IsOpen="_isContextMenuOpen" Top="_contextMenuTop" Left="_contextMenuLeft">
    <div class="bg-white w-60 border border-gray-300 rounded flex flex-col text-sm py-2 px-2 text-gray-500 shadow-lg">
        <div class="flex items-center hover:bg-gray-100 py-1 px-2 rounded cursor-pointer" @onclick="OpenPropertiesModal">
            <span class="text-lg mdi mdi-code-json text-gray-500 mr-2"></span>
            <span>Properties Viewer</span>
        </div>
    </div>
</UIContextMenu>

<UIDialog
    @bind-Visible="_isParametersDialogOpen" 
    MaxWidth="MaxWidth.ExtraSmall">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Parameters
        </MudText>
    </TitleContent>
    <DialogContent>
        <div>
            @* Synchronize with Rightbar_Settings *@
            @foreach (var (key, argument) in _parametersCatalogItem!.Representation.Parameters!)
            {
                @if (argument.ValueKind == JsonValueKind.Object &&
                    argument.TryGetStringValue("type", out var type) && type == "input-integer" &&
                    argument.TryGetStringValue("label", out var label) &&
                    argument.TryGetIntegerValue("default", out var defaultValue) &&
                    argument.TryGetIntegerValue("minimum", out var minimum) &&
                    argument.TryGetIntegerValue("maximum", out var maximum))
                {
                    <UIOption Key="@key" DefaultValue="defaultValue.Value" Store="_parametersArgumentMap">
                        <ChildContent>
                            <MudNumericField
                                @bind-Value="@context.Value"
                                Label="@label"
                                Min="minimum.Value"
                                Max="maximum.Value" />
                        </ChildContent>
                    </UIOption>
                }
                else if (argument.ValueKind == JsonValueKind.Object &&
                    argument.TryGetStringValue("type", out var type2) && type2 == "select" &&
                    argument.TryGetStringValue("label", out var label2) &&
                    argument.TryGetStringValue("default", out var defaultValue2))
                {
                    <UIOption Key="@key" DefaultValue="defaultValue2" Store="_parametersArgumentMap">
                        <UISelect
                            T="string"
                            @bind-Value="@context.Value"
                            Label="@label2"
                            Items="@((argument.GetStringDictionary("items") ?? new Dictionary<string, string>()).Keys)"
                            ToStringFunc="@(item => argument.GetStringDictionary("items")![item])" />
                    </UIOption>
                }
                else
                {
                    <span>The argument @key could not be rendered.</span>
                }
            }
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton
            OnClick="SelectParameterizedCatalogItem"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Outlined.Add">
            Add
        </MudButton>
    </DialogActions>
</UIDialog>

@if (_contextMenuCatalogItem is not null)
{
    <PropertiesView Properties="_contextMenuCatalogItem.Resource.Properties" @bind-IsOpen="_isPropertiesViewDialogOpen" />
}

@code {
    private PropertyChangedEventHandler _handler;
    private string _searchIcon = Icons.Material.Filled.Search;
    private bool _isPropertiesViewDialogOpen;
    private bool _isParametersDialogOpen;
    private bool _isContextMenuOpen;
    private double _contextMenuTop;
    private double _contextMenuLeft;
    private CatalogItemViewModel? _contextMenuCatalogItem;
    private CatalogItemViewModel? _parametersCatalogItem;
    private IDictionary<string, string>? _parametersArgumentMap;

    public ResourceView()
    {
        _handler = async (sender, e) =>
        {
            if (e.PropertyName == nameof(AppState.SearchString))
            {
                _searchIcon = string.IsNullOrWhiteSpace(AppState.SearchString)
                    ? Icons.Material.Filled.Search
                    : Icons.Material.Filled.Close;            }

            else if (e.PropertyName == nameof(AppState.Settings.SelectedCatalogItems))
            {
                StateHasChanged();
            }

            else if (e.PropertyName == nameof(AppState.EditModeCatalogMap))
            {
                StateHasChanged();
            }
        };
    }

    public void Dispose()
    {
        AppState.PropertyChanged -= _handler;
        AppState.Settings.PropertyChanged -= _handler;
    }

    protected override void OnInitialized()
    {
        AppState.PropertyChanged += _handler;
        AppState.Settings.PropertyChanged +=  _handler;
    }


    private async Task SelectCatalogItemsGroupAsync(List<CatalogItemViewModel> catalogItems)
    {
        AppState.CatalogItemsGroup = catalogItems;
    }

    private void OpenPropertiesModal()
    {
        _isPropertiesViewDialogOpen = true;
    }

    private void SetNewMetaDataValue(string resourceId, string newValue, string propertyKey)
    {
        if (AppState.EditModeCatalogMap.TryGetValue(AppState.SelectedCatalog!.Id, out var map))
        {
            var key = new EditModeItem(resourceId, propertyKey);
            map[key] = newValue;
        }
    }

    private void SelectParameterizedCatalogItem()
    {
        _isParametersDialogOpen = false;
        AppState.Settings.ToggleCatalogItemSelection(new CatalogItemSelectionViewModel(_parametersCatalogItem!, _parametersArgumentMap));
    }

    private void ToggleCatalogItemSelection(CatalogItemViewModel catalogItem)
    {
        var parameters = catalogItem.Representation.Parameters;

        if (parameters is not null && parameters.Any())
        {
            _parametersArgumentMap = new Dictionary<string, string>();
            _parametersCatalogItem = catalogItem;
            _isParametersDialogOpen = true;
        }
        else
        {
            AppState.Settings.ToggleCatalogItemSelection(new CatalogItemSelectionViewModel(catalogItem, default));
        }
    }

    private void CommittedItemChanges(CatalogItemViewModel item)
    {
        var id = item.Resource.Id;
        if(item.DescriptionHasChanged)
        {
            SetNewMetaDataValue(id, item.Description, CatalogItemViewModel.DESCRIPTION_KEY);
        }
        else if(item.UnitHasChanged)
        {
            SetNewMetaDataValue(id, item.Unit, CatalogItemViewModel.UNIT_KEY);
        }
        else if(item.WarningHasChanged)
        {
            SetNewMetaDataValue(id, item.Warning, CatalogItemViewModel.WARNING_KEY);
        }
        item.ResetHasChangedState();
    }

    // quick filter - filter globally across multiple columns with the same input
    private Func<CatalogItemViewModel, bool> QuickFilter => x =>
    {
        var searchString = AppState.SearchString != null ? AppState.SearchString : "";

        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (x.Resource.Id.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (Utilities.ToUnitString(x.Representation.SamplePeriod).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        var description = x.Description != null ? x.Description : "";
        if (description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        var unit = x.Unit != null ? x.Unit : "";
        if (unit.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        var warning = x.Warning != null ? x.Warning : "";
        if (warning.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private void RowClicked(DataGridRowClickEventArgs<CatalogItemViewModel> args)
    {
        if(!AppState.EditModeCatalogMap.ContainsKey(AppState.SelectedCatalog!.Id))
        {
            ToggleCatalogItemSelection(args.Item);
        }
    }

    private void OpenGridContextMenu(DataGridRowClickEventArgs<CatalogItemViewModel> args)
    {
        _contextMenuLeft = args.MouseEventArgs.PageX;
        _contextMenuTop = args.MouseEventArgs.PageY;
        _contextMenuCatalogItem = args.Item;
        _isContextMenuOpen = true;
    }


    // style the rows where the Element.Position == 0 to have italic text.
    private Func<CatalogItemViewModel, int, string> RowStyleFunc => (x, i) =>
    {
        if (AppState.Settings.IsSelected(x))
            return "background-color:#EACE5D";

        return "";
    };
}