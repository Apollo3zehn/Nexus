@using System.Text.Json
@using System.Text.Encodings.Web
@inject IJSInProcessRuntime JSRuntime

<UIDialog 
    @bind-Visible="BoundValue" 
    MaxWidth="MaxWidth.Small">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Properties
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="h-full">
            @if (Properties is not null)
            {
                <pre>
                    <code>
                        @GetHighlightedCode()
                    </code>
                </pre>
            }
            else
            {
                <div class="h-full flex justify-center items-center text-gray-300">
                    <span class="mr-3 text-4xl mdi mdi-pac-man"></span>
                    <span>no properties available</span>
                </div>
            }
        </div>
    </DialogContent>
</UIDialog>

@code {

    private static JsonSerializerOptions _options = new JsonSerializerOptions()
    {
        Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
        WriteIndented = true
    };

    [Parameter]
    public IReadOnlyDictionary<string, JsonElement>? Properties { get; set; } = default!;

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    @* https://github.com/dotnet/AspNetCore.Docs/issues/17921 *@
    private bool BoundValue
    {
        get => IsOpen;
        set => IsOpenChanged.InvokeAsync(value);
    }

    private MarkupString GetHighlightedCode()
    {
        var code = JsonSerializer.Serialize(Properties, _options);
        var highlightedCode = JSRuntime.Invoke<string>("nexus.util.highlight", code, "json");

        return new MarkupString(highlightedCode);
    }
}
