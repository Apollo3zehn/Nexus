@inject ISnackbar Snackbar

<MudTooltip Text="About">
    <MudIconButton OnClick="OpenCatalogAboutModal" Icon="@Icons.Material.Outlined.Info" />
</MudTooltip>

<UIDialog @bind-IsVisible="_isCatalogAboutDialogOpen" MaxWidth="MaxWidth.ExtraSmall">

    <TitleContent>
        <MudText Typo="Typo.h6">
            About
        </MudText>
    </TitleContent>

    <DialogContent>
        @if (_extensionDescriptions is null || !_extensionDescriptions.Any())
        {
            <div class="h-full flex justify-center items-center text-gray-300">
                <span class="mr-3 text-4xl mdi mdi-pac-man"></span>
                <span>no data available</span>
            </div>
        }
        else
        {
            <div class="flex flex-col gap-3">
                @foreach(var description in _extensionDescriptions)
                {
                    <h1 class="uppercase tracking-widest p-1 mt-2 border-b border-gray-200 text-cyan-700">@description.Type</h1>

                    <div class="flex flex-col p-1 gap-2">

                        <div>@description.Version</div>

                        @if (!string.IsNullOrWhiteSpace(description.Description))
                        {
                            <span class="text-sm">@description.Description</span>
                        }

                        @* @if (!string.IsNullOrWhiteSpace(description.DataSourceInfoUrl))
                        {
                            <a class="text-gray-700 text-sm hover:text-orange-500 p-1" href="@description.DataSourceInfoUrl"
                                target="_blank">
                                <span class="mdi mdi-information-outline text-lg mr-1"></span>
                                <span>Info Website</span>
                            </a>
                        } *@

                        <div class="flex justify-between">

                            @if (!string.IsNullOrWhiteSpace(description.ProjectUrl))
                            {
                                <a class="text-cyan-700 text-sm hover:text-orange-500" href="@description.ProjectUrl"
                                    target="_blank">
                                    <span class="mdi mdi-web text-lg mr-1"></span>
                                    <span>Project Website</span>
                                </a>
                            }

                            @if (!string.IsNullOrWhiteSpace(description.RepositoryUrl))
                            {
                                <a class="text-cyan-700 text-sm hover:text-orange-500" href="@description.RepositoryUrl"
                                    target="_blank">
                                    <span class="mdi mdi-source-branch text-lg mr-1"></span>
                                    <span>Source Repository</span>
                                </a>
                            }

                        </div>
                    </div>
                }
            </div>
        }
    </DialogContent>
</UIDialog>

@code {
    private bool _isCatalogAboutDialogOpen;
    private IReadOnlyList<ExtensionDescription>? _extensionDescriptions;

    [Parameter]
    public ResourceCatalogViewModel Catalog { get; set; } = default!;

    [Inject]
    public AppState AppState { get; set; } = default!;

    [Inject]
    public INexusClient Client { get; set; } = default!;

    private void OpenCatalogAboutModal()
    {
        _isCatalogAboutDialogOpen = true;

        _ = Task.Run(async () =>
        {
            try
            {
                var dataSourceTypes = Catalog.Info.PipelineInfo.Types;
                var extensionDescriptions = await Client.Sources.GetDescriptionsAsync();

                _extensionDescriptions = extensionDescriptions
                    .Where(current => dataSourceTypes.Contains(current.Type))
                    .ToArray();

                _extensionDescriptions = [_extensionDescriptions[0], _extensionDescriptions[0]];
            }
            catch (Exception ex)
            {
                AppState.AddError(ex, Snackbar);
            }

            StateHasChanged();
        });
    }
}